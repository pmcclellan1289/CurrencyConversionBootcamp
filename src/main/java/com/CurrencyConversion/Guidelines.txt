Phase 1: Console application
Create a solution that handles currency conversion between U.S. dollars, Canadian Dollars, and the Icelandic Krona.
A user should be able to input any of the currencies listed above, and convert them to the other currencies.
The solution should be a console app using your applicable language only.  The console app should allow the user
to convert multiple times without relaunching the application using a console menu.

Pay attention to and be prepared to discuss the use of OO principles within your solution.


Phase 2:
Allow user to add/remove/modify currencies within one session
Expand the console app to allow the user to add or remove currencies, as well as modify an existing currency.
You do not have to save the exchange rates or currencies between sessions.

Additionally, modify the current menu to allow the user to choose the currency for input, and a single currency for output.


Phase 3:
Allow user to add/remove/modify currencies/exchange rates and persist via xml or properties files
Expand the solution to allow for updated exchange rates and currencies without recompiling or re-deploying the solution.
This should be achieved through the use of external property files.

Use XML for the file formats and make use of available libraries to load the xml files into objects.


Phase 4:
Move codebase to Github repository
Move the solution into a repository. Provide a document describing how to access, check out, and run the solution.


Phase 5:
Create a user interface
Expand the solution to provide a GUI.  The user should be able to convert any of the currencies supported through
the UI alone. The user should also be able to add new currencies, remove currencies, and update exchange rates
within the user interface.

Be prepared to explain the use of the decorator pattern within the chosen UI library.


Phase 6:
Connect application to database to persist information
Expand the solution by designing and creating a database to replace the property files used in the application
by backing the solution with a database. The user should not have to log in to the application.  The user should
still be able to add, update, and remove currencies. The user should be able to import previous property files
into the database from within the GUI.

Make use of the DAO pattern to abstract the data layer.


Phase 7:
Connect application to dynamic exchange rate website
Expand the solution by extracting dynamic values from an online resource. The user should still be able to add,
update, and remove currencies to convert between. The data that is returned to the user will instead require a
call to whichever API you decide to use.






Additional phases:
KDâ€™s concern about overwhelming needs to be very closely monitored. Eventually the next shift should move to
EE, Hibernate, and Web UI, DAO Pattern, Restful Services, Dependency Injection, Migration of web server but
should not be overwhelming.


Suggested Phase 7:
Replace the current DB connection and object hierarchy with a new implementation. You should maintain the
use of the DAO pattern to abstract out the work involved.

Another Proposed Phase 7:  Adding Unit Tests to the Project
Write unit tests to test the methods in each class within the project.  Unit test files will be written for
every class except for the main class.  Of the remaining classes, they will each have unit tests for each
method inside of them, excluding getters and setters.
